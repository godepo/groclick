// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package groclick

import (
	"context"

	"github.com/ClickHouse/clickhouse-go/v2/lib/driver"
	mock "github.com/stretchr/testify/mock"
)

// NewMockConn creates a new instance of MockConn. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConn(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConn {
	mock := &MockConn{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockConn is an autogenerated mock type for the Conn type
type MockConn struct {
	mock.Mock
}

type MockConn_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConn) EXPECT() *MockConn_Expecter {
	return &MockConn_Expecter{mock: &_m.Mock}
}

// AsyncInsert provides a mock function for the type MockConn
func (_mock *MockConn) AsyncInsert(ctx context.Context, query string, wait bool, args ...any) error {
	var tmpRet mock.Arguments
	if len(args) > 0 {
		tmpRet = _mock.Called(ctx, query, wait, args)
	} else {
		tmpRet = _mock.Called(ctx, query, wait)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for AsyncInsert")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, bool, ...any) error); ok {
		r0 = returnFunc(ctx, query, wait, args...)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockConn_AsyncInsert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AsyncInsert'
type MockConn_AsyncInsert_Call struct {
	*mock.Call
}

// AsyncInsert is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
//   - wait bool
//   - args ...any
func (_e *MockConn_Expecter) AsyncInsert(ctx interface{}, query interface{}, wait interface{}, args ...interface{}) *MockConn_AsyncInsert_Call {
	return &MockConn_AsyncInsert_Call{Call: _e.mock.On("AsyncInsert",
		append([]interface{}{ctx, query, wait}, args...)...)}
}

func (_c *MockConn_AsyncInsert_Call) Run(run func(ctx context.Context, query string, wait bool, args ...any)) *MockConn_AsyncInsert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 bool
		if args[2] != nil {
			arg2 = args[2].(bool)
		}
		var arg3 []any
		var variadicArgs []any
		if len(args) > 3 {
			variadicArgs = args[3].([]any)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockConn_AsyncInsert_Call) Return(err error) *MockConn_AsyncInsert_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockConn_AsyncInsert_Call) RunAndReturn(run func(ctx context.Context, query string, wait bool, args ...any) error) *MockConn_AsyncInsert_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function for the type MockConn
func (_mock *MockConn) Close() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockConn_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockConn_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockConn_Expecter) Close() *MockConn_Close_Call {
	return &MockConn_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockConn_Close_Call) Run(run func()) *MockConn_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConn_Close_Call) Return(err error) *MockConn_Close_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockConn_Close_Call) RunAndReturn(run func() error) *MockConn_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Contributors provides a mock function for the type MockConn
func (_mock *MockConn) Contributors() []string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Contributors")
	}

	var r0 []string
	if returnFunc, ok := ret.Get(0).(func() []string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	return r0
}

// MockConn_Contributors_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Contributors'
type MockConn_Contributors_Call struct {
	*mock.Call
}

// Contributors is a helper method to define mock.On call
func (_e *MockConn_Expecter) Contributors() *MockConn_Contributors_Call {
	return &MockConn_Contributors_Call{Call: _e.mock.On("Contributors")}
}

func (_c *MockConn_Contributors_Call) Run(run func()) *MockConn_Contributors_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConn_Contributors_Call) Return(strings []string) *MockConn_Contributors_Call {
	_c.Call.Return(strings)
	return _c
}

func (_c *MockConn_Contributors_Call) RunAndReturn(run func() []string) *MockConn_Contributors_Call {
	_c.Call.Return(run)
	return _c
}

// Exec provides a mock function for the type MockConn
func (_mock *MockConn) Exec(ctx context.Context, query string, args ...any) error {
	var tmpRet mock.Arguments
	if len(args) > 0 {
		tmpRet = _mock.Called(ctx, query, args)
	} else {
		tmpRet = _mock.Called(ctx, query)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Exec")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...any) error); ok {
		r0 = returnFunc(ctx, query, args...)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockConn_Exec_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exec'
type MockConn_Exec_Call struct {
	*mock.Call
}

// Exec is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
//   - args ...any
func (_e *MockConn_Expecter) Exec(ctx interface{}, query interface{}, args ...interface{}) *MockConn_Exec_Call {
	return &MockConn_Exec_Call{Call: _e.mock.On("Exec",
		append([]interface{}{ctx, query}, args...)...)}
}

func (_c *MockConn_Exec_Call) Run(run func(ctx context.Context, query string, args ...any)) *MockConn_Exec_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []any
		var variadicArgs []any
		if len(args) > 2 {
			variadicArgs = args[2].([]any)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockConn_Exec_Call) Return(err error) *MockConn_Exec_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockConn_Exec_Call) RunAndReturn(run func(ctx context.Context, query string, args ...any) error) *MockConn_Exec_Call {
	_c.Call.Return(run)
	return _c
}

// Ping provides a mock function for the type MockConn
func (_mock *MockConn) Ping(context1 context.Context) error {
	ret := _mock.Called(context1)

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(context1)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockConn_Ping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ping'
type MockConn_Ping_Call struct {
	*mock.Call
}

// Ping is a helper method to define mock.On call
//   - context1 context.Context
func (_e *MockConn_Expecter) Ping(context1 interface{}) *MockConn_Ping_Call {
	return &MockConn_Ping_Call{Call: _e.mock.On("Ping", context1)}
}

func (_c *MockConn_Ping_Call) Run(run func(context1 context.Context)) *MockConn_Ping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockConn_Ping_Call) Return(err error) *MockConn_Ping_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockConn_Ping_Call) RunAndReturn(run func(context1 context.Context) error) *MockConn_Ping_Call {
	_c.Call.Return(run)
	return _c
}

// PrepareBatch provides a mock function for the type MockConn
func (_mock *MockConn) PrepareBatch(ctx context.Context, query string, opts ...driver.PrepareBatchOption) (driver.Batch, error) {
	var tmpRet mock.Arguments
	if len(opts) > 0 {
		tmpRet = _mock.Called(ctx, query, opts)
	} else {
		tmpRet = _mock.Called(ctx, query)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for PrepareBatch")
	}

	var r0 driver.Batch
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...driver.PrepareBatchOption) (driver.Batch, error)); ok {
		return returnFunc(ctx, query, opts...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...driver.PrepareBatchOption) driver.Batch); ok {
		r0 = returnFunc(ctx, query, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(driver.Batch)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...driver.PrepareBatchOption) error); ok {
		r1 = returnFunc(ctx, query, opts...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConn_PrepareBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PrepareBatch'
type MockConn_PrepareBatch_Call struct {
	*mock.Call
}

// PrepareBatch is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
//   - opts ...driver.PrepareBatchOption
func (_e *MockConn_Expecter) PrepareBatch(ctx interface{}, query interface{}, opts ...interface{}) *MockConn_PrepareBatch_Call {
	return &MockConn_PrepareBatch_Call{Call: _e.mock.On("PrepareBatch",
		append([]interface{}{ctx, query}, opts...)...)}
}

func (_c *MockConn_PrepareBatch_Call) Run(run func(ctx context.Context, query string, opts ...driver.PrepareBatchOption)) *MockConn_PrepareBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []driver.PrepareBatchOption
		var variadicArgs []driver.PrepareBatchOption
		if len(args) > 2 {
			variadicArgs = args[2].([]driver.PrepareBatchOption)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockConn_PrepareBatch_Call) Return(batch driver.Batch, err error) *MockConn_PrepareBatch_Call {
	_c.Call.Return(batch, err)
	return _c
}

func (_c *MockConn_PrepareBatch_Call) RunAndReturn(run func(ctx context.Context, query string, opts ...driver.PrepareBatchOption) (driver.Batch, error)) *MockConn_PrepareBatch_Call {
	_c.Call.Return(run)
	return _c
}

// Query provides a mock function for the type MockConn
func (_mock *MockConn) Query(ctx context.Context, query string, args ...any) (driver.Rows, error) {
	var tmpRet mock.Arguments
	if len(args) > 0 {
		tmpRet = _mock.Called(ctx, query, args)
	} else {
		tmpRet = _mock.Called(ctx, query)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 driver.Rows
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...any) (driver.Rows, error)); ok {
		return returnFunc(ctx, query, args...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...any) driver.Rows); ok {
		r0 = returnFunc(ctx, query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(driver.Rows)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, ...any) error); ok {
		r1 = returnFunc(ctx, query, args...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConn_Query_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Query'
type MockConn_Query_Call struct {
	*mock.Call
}

// Query is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
//   - args ...any
func (_e *MockConn_Expecter) Query(ctx interface{}, query interface{}, args ...interface{}) *MockConn_Query_Call {
	return &MockConn_Query_Call{Call: _e.mock.On("Query",
		append([]interface{}{ctx, query}, args...)...)}
}

func (_c *MockConn_Query_Call) Run(run func(ctx context.Context, query string, args ...any)) *MockConn_Query_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []any
		var variadicArgs []any
		if len(args) > 2 {
			variadicArgs = args[2].([]any)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockConn_Query_Call) Return(rows driver.Rows, err error) *MockConn_Query_Call {
	_c.Call.Return(rows, err)
	return _c
}

func (_c *MockConn_Query_Call) RunAndReturn(run func(ctx context.Context, query string, args ...any) (driver.Rows, error)) *MockConn_Query_Call {
	_c.Call.Return(run)
	return _c
}

// QueryRow provides a mock function for the type MockConn
func (_mock *MockConn) QueryRow(ctx context.Context, query string, args ...any) driver.Row {
	var tmpRet mock.Arguments
	if len(args) > 0 {
		tmpRet = _mock.Called(ctx, query, args)
	} else {
		tmpRet = _mock.Called(ctx, query)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for QueryRow")
	}

	var r0 driver.Row
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...any) driver.Row); ok {
		r0 = returnFunc(ctx, query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(driver.Row)
		}
	}
	return r0
}

// MockConn_QueryRow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryRow'
type MockConn_QueryRow_Call struct {
	*mock.Call
}

// QueryRow is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
//   - args ...any
func (_e *MockConn_Expecter) QueryRow(ctx interface{}, query interface{}, args ...interface{}) *MockConn_QueryRow_Call {
	return &MockConn_QueryRow_Call{Call: _e.mock.On("QueryRow",
		append([]interface{}{ctx, query}, args...)...)}
}

func (_c *MockConn_QueryRow_Call) Run(run func(ctx context.Context, query string, args ...any)) *MockConn_QueryRow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []any
		var variadicArgs []any
		if len(args) > 2 {
			variadicArgs = args[2].([]any)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockConn_QueryRow_Call) Return(row driver.Row) *MockConn_QueryRow_Call {
	_c.Call.Return(row)
	return _c
}

func (_c *MockConn_QueryRow_Call) RunAndReturn(run func(ctx context.Context, query string, args ...any) driver.Row) *MockConn_QueryRow_Call {
	_c.Call.Return(run)
	return _c
}

// Select provides a mock function for the type MockConn
func (_mock *MockConn) Select(ctx context.Context, dest any, query string, args ...any) error {
	var tmpRet mock.Arguments
	if len(args) > 0 {
		tmpRet = _mock.Called(ctx, dest, query, args)
	} else {
		tmpRet = _mock.Called(ctx, dest, query)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Select")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, any, string, ...any) error); ok {
		r0 = returnFunc(ctx, dest, query, args...)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockConn_Select_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Select'
type MockConn_Select_Call struct {
	*mock.Call
}

// Select is a helper method to define mock.On call
//   - ctx context.Context
//   - dest any
//   - query string
//   - args ...any
func (_e *MockConn_Expecter) Select(ctx interface{}, dest interface{}, query interface{}, args ...interface{}) *MockConn_Select_Call {
	return &MockConn_Select_Call{Call: _e.mock.On("Select",
		append([]interface{}{ctx, dest, query}, args...)...)}
}

func (_c *MockConn_Select_Call) Run(run func(ctx context.Context, dest any, query string, args ...any)) *MockConn_Select_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 any
		if args[1] != nil {
			arg1 = args[1].(any)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 []any
		var variadicArgs []any
		if len(args) > 3 {
			variadicArgs = args[3].([]any)
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockConn_Select_Call) Return(err error) *MockConn_Select_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockConn_Select_Call) RunAndReturn(run func(ctx context.Context, dest any, query string, args ...any) error) *MockConn_Select_Call {
	_c.Call.Return(run)
	return _c
}

// ServerVersion provides a mock function for the type MockConn
func (_mock *MockConn) ServerVersion() (*driver.ServerVersion, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ServerVersion")
	}

	var r0 *driver.ServerVersion
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (*driver.ServerVersion, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() *driver.ServerVersion); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*driver.ServerVersion)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConn_ServerVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ServerVersion'
type MockConn_ServerVersion_Call struct {
	*mock.Call
}

// ServerVersion is a helper method to define mock.On call
func (_e *MockConn_Expecter) ServerVersion() *MockConn_ServerVersion_Call {
	return &MockConn_ServerVersion_Call{Call: _e.mock.On("ServerVersion")}
}

func (_c *MockConn_ServerVersion_Call) Run(run func()) *MockConn_ServerVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConn_ServerVersion_Call) Return(v *driver.ServerVersion, err error) *MockConn_ServerVersion_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockConn_ServerVersion_Call) RunAndReturn(run func() (*driver.ServerVersion, error)) *MockConn_ServerVersion_Call {
	_c.Call.Return(run)
	return _c
}

// Stats provides a mock function for the type MockConn
func (_mock *MockConn) Stats() driver.Stats {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Stats")
	}

	var r0 driver.Stats
	if returnFunc, ok := ret.Get(0).(func() driver.Stats); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(driver.Stats)
	}
	return r0
}

// MockConn_Stats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stats'
type MockConn_Stats_Call struct {
	*mock.Call
}

// Stats is a helper method to define mock.On call
func (_e *MockConn_Expecter) Stats() *MockConn_Stats_Call {
	return &MockConn_Stats_Call{Call: _e.mock.On("Stats")}
}

func (_c *MockConn_Stats_Call) Run(run func()) *MockConn_Stats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConn_Stats_Call) Return(stats driver.Stats) *MockConn_Stats_Call {
	_c.Call.Return(stats)
	return _c
}

func (_c *MockConn_Stats_Call) RunAndReturn(run func() driver.Stats) *MockConn_Stats_Call {
	_c.Call.Return(run)
	return _c
}
