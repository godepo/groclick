// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package groclick

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockDB creates a new instance of MockDB. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDB(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDB {
	mock := &MockDB{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDB is an autogenerated mock type for the DB type
type MockDB struct {
	mock.Mock
}

type MockDB_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDB) EXPECT() *MockDB_Expecter {
	return &MockDB_Expecter{mock: &_m.Mock}
}

// Exec provides a mock function for the type MockDB
func (_mock *MockDB) Exec(ctx context.Context, query string, args ...any) error {
	var tmpRet mock.Arguments
	if len(args) > 0 {
		tmpRet = _mock.Called(ctx, query, args)
	} else {
		tmpRet = _mock.Called(ctx, query)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Exec")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, ...any) error); ok {
		r0 = returnFunc(ctx, query, args...)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDB_Exec_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exec'
type MockDB_Exec_Call struct {
	*mock.Call
}

// Exec is a helper method to define mock.On call
//   - ctx context.Context
//   - query string
//   - args ...any
func (_e *MockDB_Expecter) Exec(ctx interface{}, query interface{}, args ...interface{}) *MockDB_Exec_Call {
	return &MockDB_Exec_Call{Call: _e.mock.On("Exec",
		append([]interface{}{ctx, query}, args...)...)}
}

func (_c *MockDB_Exec_Call) Run(run func(ctx context.Context, query string, args ...any)) *MockDB_Exec_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []any
		var variadicArgs []any
		if len(args) > 2 {
			variadicArgs = args[2].([]any)
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockDB_Exec_Call) Return(err error) *MockDB_Exec_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDB_Exec_Call) RunAndReturn(run func(ctx context.Context, query string, args ...any) error) *MockDB_Exec_Call {
	_c.Call.Return(run)
	return _c
}
